# Stage 1: Build using golang:alpine
FROM golang:1.22-alpine as builder

# Install necessary build tools in Alpine
RUN apk add --no-cache build-base bash ca-certificates

# Set the working directory inside the container
WORKDIR /app

# Copy Go modules manifest and download dependencies
COPY go.mod go.sum ./
RUN go mod tidy
RUN go mod download

# Copy the rest of the application code
COPY . .

# Build the Go application
RUN CGO_ENABLED=0 GOOS=linux go build -o userService .

# Install Goose for running migrations
RUN go install github.com/pressly/goose/v3/cmd/goose@latest

# Stage 2: Final Stage - Run (Alpine)
FROM alpine:3.18

# Install minimal tools required
RUN apk add --no-cache bash ca-certificates

# Set the working directory inside the final container
WORKDIR /app

# Copy the binary and migration files from the builder stage
COPY --from=builder /app/userService /app/userService

# Copy Goose binary from the builder stage
COPY --from=builder /go/bin/goose /usr/local/bin/goose

# Copy the migration files into the container
COPY ./sql/schema /app/sql/schema

# Ensure Goose is executable
RUN chmod +x /usr/local/bin/goose

# Copy env file
COPY .env /app/.env

# Expose the port the application will run on
EXPOSE 7071

# Run the migrations and then start the user service
ENTRYPOINT ["/bin/sh", "-c", "goose -dir /app/sql/schema postgres postgres://user_user:userinterior@userInteriorDb:5432/user_db?sslmode=disable up && ./userService"]
