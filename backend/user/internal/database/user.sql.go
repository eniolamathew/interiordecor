// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: user.sql

package database

import (
	"context"
	"time"
)

const createUser = `-- name: CreateUser :one
INSERT INTO users (email, passwordhash, subscribed, createdat) VALUES ($1, $2, $3, $4) RETURNING id, passwordhash, subscribed, createdat, email
`

type CreateUserParams struct {
	Email        string
	Passwordhash string
	Subscribed   bool
	Createdat    time.Time
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (User, error) {
	row := q.db.QueryRowContext(ctx, createUser,
		arg.Email,
		arg.Passwordhash,
		arg.Subscribed,
		arg.Createdat,
	)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Passwordhash,
		&i.Subscribed,
		&i.Createdat,
		&i.Email,
	)
	return i, err
}

const createUserProfile = `-- name: CreateUserProfile :one
INSERT INTO usersprofile (fullname, email, useraddress, postcode) VALUES ($1, $2, $3, $4) RETURNING id, fullname, email, useraddress, postcode
`

type CreateUserProfileParams struct {
	Fullname    string
	Email       string
	Useraddress string
	Postcode    string
}

func (q *Queries) CreateUserProfile(ctx context.Context, arg CreateUserProfileParams) (Usersprofile, error) {
	row := q.db.QueryRowContext(ctx, createUserProfile,
		arg.Fullname,
		arg.Email,
		arg.Useraddress,
		arg.Postcode,
	)
	var i Usersprofile
	err := row.Scan(
		&i.ID,
		&i.Fullname,
		&i.Email,
		&i.Useraddress,
		&i.Postcode,
	)
	return i, err
}

const getUserByEmail = `-- name: GetUserByEmail :one
SELECT id, email, passwordhash FROM users WHERE email = $1
`

type GetUserByEmailRow struct {
	ID           int32
	Email        string
	Passwordhash string
}

func (q *Queries) GetUserByEmail(ctx context.Context, email string) (GetUserByEmailRow, error) {
	row := q.db.QueryRowContext(ctx, getUserByEmail, email)
	var i GetUserByEmailRow
	err := row.Scan(&i.ID, &i.Email, &i.Passwordhash)
	return i, err
}

const getUserByID = `-- name: GetUserByID :one
SELECT id, email, passwordhash, subscribed, createdat FROM users WHERE id = $1
`

type GetUserByIDRow struct {
	ID           int32
	Email        string
	Passwordhash string
	Subscribed   bool
	Createdat    time.Time
}

func (q *Queries) GetUserByID(ctx context.Context, id int32) (GetUserByIDRow, error) {
	row := q.db.QueryRowContext(ctx, getUserByID, id)
	var i GetUserByIDRow
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.Passwordhash,
		&i.Subscribed,
		&i.Createdat,
	)
	return i, err
}

const getUserProfileByEmail = `-- name: GetUserProfileByEmail :one
SELECT id, fullname, email, useraddress, postcode FROM usersprofile WHERE email = $1
`

func (q *Queries) GetUserProfileByEmail(ctx context.Context, email string) (Usersprofile, error) {
	row := q.db.QueryRowContext(ctx, getUserProfileByEmail, email)
	var i Usersprofile
	err := row.Scan(
		&i.ID,
		&i.Fullname,
		&i.Email,
		&i.Useraddress,
		&i.Postcode,
	)
	return i, err
}

const getUsers = `-- name: GetUsers :many
SELECT id, email, passwordhash, subscribed, createdat FROM users ORDER BY id
`

type GetUsersRow struct {
	ID           int32
	Email        string
	Passwordhash string
	Subscribed   bool
	Createdat    time.Time
}

func (q *Queries) GetUsers(ctx context.Context) ([]GetUsersRow, error) {
	rows, err := q.db.QueryContext(ctx, getUsers)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetUsersRow
	for rows.Next() {
		var i GetUsersRow
		if err := rows.Scan(
			&i.ID,
			&i.Email,
			&i.Passwordhash,
			&i.Subscribed,
			&i.Createdat,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateUserPassword = `-- name: UpdateUserPassword :one
UPDATE users SET passwordhash = $1 WHERE email = $2 RETURNING id, passwordhash, subscribed, createdat, email
`

type UpdateUserPasswordParams struct {
	Passwordhash string
	Email        string
}

func (q *Queries) UpdateUserPassword(ctx context.Context, arg UpdateUserPasswordParams) (User, error) {
	row := q.db.QueryRowContext(ctx, updateUserPassword, arg.Passwordhash, arg.Email)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Passwordhash,
		&i.Subscribed,
		&i.Createdat,
		&i.Email,
	)
	return i, err
}

const updateUserProfile = `-- name: UpdateUserProfile :one
UPDATE usersprofile SET fullname = $1, useraddress = $2, postcode = $3 WHERE email = $4 RETURNING id, fullname, email, useraddress, postcode
`

type UpdateUserProfileParams struct {
	Fullname    string
	Useraddress string
	Postcode    string
	Email       string
}

func (q *Queries) UpdateUserProfile(ctx context.Context, arg UpdateUserProfileParams) (Usersprofile, error) {
	row := q.db.QueryRowContext(ctx, updateUserProfile,
		arg.Fullname,
		arg.Useraddress,
		arg.Postcode,
		arg.Email,
	)
	var i Usersprofile
	err := row.Scan(
		&i.ID,
		&i.Fullname,
		&i.Email,
		&i.Useraddress,
		&i.Postcode,
	)
	return i, err
}

const validateuser = `-- name: Validateuser :one
SELECT id, email, passwordhash, subscribed, createdat FROM users WHERE email = $1
`

type ValidateuserRow struct {
	ID           int32
	Email        string
	Passwordhash string
	Subscribed   bool
	Createdat    time.Time
}

func (q *Queries) Validateuser(ctx context.Context, email string) (ValidateuserRow, error) {
	row := q.db.QueryRowContext(ctx, validateuser, email)
	var i ValidateuserRow
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.Passwordhash,
		&i.Subscribed,
		&i.Createdat,
	)
	return i, err
}
