// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: design.sql

package database

import (
	"context"
)

const createGeneratedImage = `-- name: CreateGeneratedImage :one
INSERT INTO generatedimages (imageurl, jobid, imagestatus, useremail) VALUES ($1, $2, $3, $4) RETURNING id, imageurl, jobid, imagestatus, useremail
`

type CreateGeneratedImageParams struct {
	Imageurl    string
	Jobid       string
	Imagestatus string
	Useremail   string
}

func (q *Queries) CreateGeneratedImage(ctx context.Context, arg CreateGeneratedImageParams) (Generatedimage, error) {
	row := q.db.QueryRowContext(ctx, createGeneratedImage,
		arg.Imageurl,
		arg.Jobid,
		arg.Imagestatus,
		arg.Useremail,
	)
	var i Generatedimage
	err := row.Scan(
		&i.ID,
		&i.Imageurl,
		&i.Jobid,
		&i.Imagestatus,
		&i.Useremail,
	)
	return i, err
}

const getGeneratedImageByJobId = `-- name: GetGeneratedImageByJobId :one
SELECT id, imageurl, jobid, imagestatus, useremail FROM generatedimages WHERE jobid = $1
`

func (q *Queries) GetGeneratedImageByJobId(ctx context.Context, jobid string) (Generatedimage, error) {
	row := q.db.QueryRowContext(ctx, getGeneratedImageByJobId, jobid)
	var i Generatedimage
	err := row.Scan(
		&i.ID,
		&i.Imageurl,
		&i.Jobid,
		&i.Imagestatus,
		&i.Useremail,
	)
	return i, err
}

const getGeneratedImagesByEmail = `-- name: GetGeneratedImagesByEmail :many
SELECT id, imageurl, jobid, imagestatus, useremail FROM generatedimages WHERE useremail = $1 AND imagestatus = $2
`

type GetGeneratedImagesByEmailParams struct {
	Useremail   string
	Imagestatus string
}

func (q *Queries) GetGeneratedImagesByEmail(ctx context.Context, arg GetGeneratedImagesByEmailParams) ([]Generatedimage, error) {
	rows, err := q.db.QueryContext(ctx, getGeneratedImagesByEmail, arg.Useremail, arg.Imagestatus)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Generatedimage
	for rows.Next() {
		var i Generatedimage
		if err := rows.Scan(
			&i.ID,
			&i.Imageurl,
			&i.Jobid,
			&i.Imagestatus,
			&i.Useremail,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateGeneratedImageByJobId = `-- name: UpdateGeneratedImageByJobId :one
UPDATE Generatedimages SET imageurl = $2, imagestatus = $3 WHERE jobid = $1 RETURNING id, imageurl, jobid, imagestatus, useremail
`

type UpdateGeneratedImageByJobIdParams struct {
	Jobid       string
	Imageurl    string
	Imagestatus string
}

func (q *Queries) UpdateGeneratedImageByJobId(ctx context.Context, arg UpdateGeneratedImageByJobIdParams) (Generatedimage, error) {
	row := q.db.QueryRowContext(ctx, updateGeneratedImageByJobId, arg.Jobid, arg.Imageurl, arg.Imagestatus)
	var i Generatedimage
	err := row.Scan(
		&i.ID,
		&i.Imageurl,
		&i.Jobid,
		&i.Imagestatus,
		&i.Useremail,
	)
	return i, err
}
